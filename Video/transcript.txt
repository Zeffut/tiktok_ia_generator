{
  "text": " When I was scrolling through YouTube shorts yesterday and came across these videos seeing random facts about the world, here's an example. Meet the immortal jellyfish, a mesmerizing creature that defies the boundaries of life and death. And I just thought how easy these would be to automate with literally little to no effort. Here's all that went. I wanted to use Python to do this project since you can easily edit videos with it, using a library called MoviePy. And because this is essentially a free money method, I named it MoneyPrinter. First of all, I created a very simple front end where you can enter your video idea and it will automatically generate the video for you. Since I already know how to use the Bing version of ChetjipT with Python from previous projects, I'll let it create the video script based on the provided user idea. Now that I have the script, next up is to find good stop videos based on search terms that ChetjipT also generated for me. For this, I used the Paxel's API, which is very easy to use and also free. There is one problem, however. I don't know the resolution of the videos that the Paxel's API provides me with, so I need to manually resize them using MoviePy, which is a pain. Since most of the time, it simply renders this weird TV glitch screen, but somehow I managed to fix it by cropping the video clips instead of resizing them. Now I had to find a form of Texas Beach, which didn't sound too robotic, but I obviously don't have enough money for the 11-leb's API. So I went with a TikTok TTS unofficial API from GitHub, and it was converting the sentences in my script just fine. There's a platform called Assembly I, and this is what I used to get a transcript of my just generated Texas Beach, as it would include timestamps, and it can save the subtitles in the SRT format. MoviePy comes in clutch again by letting me burn subtitles into the video easily, by concatenating the original video file with a subtitle clip class instance, which just needs to path to my just exported SRT file. With that, the application is basically finished. Let's test it out. Okay, let's run our backend. All right, should be running. Now let's click on Generate and now wait. Right now let's turn rating or generating our script. It's generated it. Now these are the search terms, which you're going to use with the Paxles API. Now are the videos it shows. Now it's downloading those. Okay, it prints the script again. Now let's complete the Texas Beach using the TikTok API or unofficial API. All right, now it's generated the subtitles with the assembly I, and last on a list, it's combining everything together. And once this is done, we should have our output of N before. I'm going to speed up this process a little bit because it's pouring. All right, it seems like we still have to do something. So I'm going to take that sacrifice because I'd rather rate a little while than edit all these videos myself. So I'm fine with that. Great. Now it's done. That's it. Let's have a look at our video. The Amazon rainforest is the largest tropical rainforest in the world covering an area of approximately 5.5 million square kilometers. It is home to a diverse range of plant and animal species. Many of which are found nowhere else on earth. This looks good enough. Just here we don't think this was just a useless project. I actually tested these clips on a channel and here are the results. As you can see, I did get a couple of one KVU shorts, which is pretty impressive for an automation bot in my opinion. If you guys want the code, like and subscribe, as I'll be posting it on GitHub in the upcoming days. Till next time.",
  "segments": [
    {
      "id": 0,
      "seek": 0,
      "start": 0.0,
      "end": 3.96,
      "text": "When I was scrolling through YouTube shorts yesterday and came across these videos"
    },
    {
      "id": 1,
      "seek": 0,
      "start": 3.96,
      "end": 6.68,
      "text": "seeing random facts about the world, here's an example."
    },
    {
      "id": 2,
      "seek": 0,
      "start": 6.68,
      "end": 11.040000000000001,
      "text": "Meet the immortal jellyfish, a mesmerizing creature that defies the boundaries of life and death."
    },
    {
      "id": 3,
      "seek": 0,
      "start": 11.040000000000001,
      "end": 15.76,
      "text": "And I just thought how easy these would be to automate with literally little to no effort."
    },
    {
      "id": 4,
      "seek": 0,
      "start": 15.76,
      "end": 16.64,
      "text": "Here's all that went."
    },
    {
      "id": 5,
      "seek": 0,
      "start": 16.64,
      "end": 20.8,
      "text": "I wanted to use Python to do this project since you can easily edit videos with it,"
    },
    {
      "id": 6,
      "seek": 0,
      "start": 20.8,
      "end": 22.8,
      "text": "using a library called MoviePy."
    },
    {
      "id": 7,
      "seek": 0,
      "start": 22.8,
      "end": 26.400000000000002,
      "text": "And because this is essentially a free money method, I named it MoneyPrinter."
    },
    {
      "id": 8,
      "seek": 2640,
      "start": 26.479999999999997,
      "end": 30.32,
      "text": "First of all, I created a very simple front end where you can enter your video idea"
    },
    {
      "id": 9,
      "seek": 2640,
      "start": 30.32,
      "end": 33.28,
      "text": "and it will automatically generate the video for you."
    },
    {
      "id": 10,
      "seek": 2640,
      "start": 33.28,
      "end": 38.16,
      "text": "Since I already know how to use the Bing version of ChetjipT with Python from previous projects,"
    },
    {
      "id": 11,
      "seek": 2640,
      "start": 38.16,
      "end": 41.76,
      "text": "I'll let it create the video script based on the provided user idea."
    },
    {
      "id": 12,
      "seek": 2640,
      "start": 41.76,
      "end": 46.08,
      "text": "Now that I have the script, next up is to find good stop videos based on search terms"
    },
    {
      "id": 13,
      "seek": 2640,
      "start": 46.08,
      "end": 48.08,
      "text": "that ChetjipT also generated for me."
    },
    {
      "id": 14,
      "seek": 2640,
      "start": 48.08,
      "end": 52.08,
      "text": "For this, I used the Paxel's API, which is very easy to use and also free."
    },
    {
      "id": 15,
      "seek": 2640,
      "start": 52.08,
      "end": 53.599999999999994,
      "text": "There is one problem, however."
    },
    {
      "id": 16,
      "seek": 5360,
      "start": 53.68,
      "end": 57.44,
      "text": "I don't know the resolution of the videos that the Paxel's API provides me with,"
    },
    {
      "id": 17,
      "seek": 5360,
      "start": 57.44,
      "end": 60.72,
      "text": "so I need to manually resize them using MoviePy, which is a pain."
    },
    {
      "id": 18,
      "seek": 5360,
      "start": 60.72,
      "end": 64.0,
      "text": "Since most of the time, it simply renders this weird TV glitch screen,"
    },
    {
      "id": 19,
      "seek": 5360,
      "start": 64.0,
      "end": 68.48,
      "text": "but somehow I managed to fix it by cropping the video clips instead of resizing them."
    },
    {
      "id": 20,
      "seek": 5360,
      "start": 68.48,
      "end": 72.24000000000001,
      "text": "Now I had to find a form of Texas Beach, which didn't sound too robotic,"
    },
    {
      "id": 21,
      "seek": 5360,
      "start": 72.24000000000001,
      "end": 75.52000000000001,
      "text": "but I obviously don't have enough money for the 11-leb's API."
    },
    {
      "id": 22,
      "seek": 5360,
      "start": 75.52000000000001,
      "end": 79.04,
      "text": "So I went with a TikTok TTS unofficial API from GitHub,"
    },
    {
      "id": 23,
      "seek": 5360,
      "start": 79.04,
      "end": 81.68,
      "text": "and it was converting the sentences in my script just fine."
    },
    {
      "id": 24,
      "seek": 8168,
      "start": 81.76,
      "end": 85.60000000000001,
      "text": "There's a platform called Assembly I, and this is what I used to get a transcript of my"
    },
    {
      "id": 25,
      "seek": 8168,
      "start": 85.60000000000001,
      "end": 91.60000000000001,
      "text": "just generated Texas Beach, as it would include timestamps, and it can save the subtitles in the SRT format."
    },
    {
      "id": 26,
      "seek": 8168,
      "start": 91.60000000000001,
      "end": 96.0,
      "text": "MoviePy comes in clutch again by letting me burn subtitles into the video easily,"
    },
    {
      "id": 27,
      "seek": 8168,
      "start": 96.0,
      "end": 100.56,
      "text": "by concatenating the original video file with a subtitle clip class instance,"
    },
    {
      "id": 28,
      "seek": 8168,
      "start": 100.56,
      "end": 104.08000000000001,
      "text": "which just needs to path to my just exported SRT file."
    },
    {
      "id": 29,
      "seek": 8168,
      "start": 104.08000000000001,
      "end": 107.12,
      "text": "With that, the application is basically finished. Let's test it out."
    },
    {
      "id": 30,
      "seek": 8168,
      "start": 107.12,
      "end": 110.4,
      "text": "Okay, let's run our backend. All right, should be running."
    },
    {
      "id": 31,
      "seek": 11040,
      "start": 111.04,
      "end": 117.68,
      "text": "Now let's click on Generate and now wait. Right now let's turn rating or generating our script."
    },
    {
      "id": 32,
      "seek": 11040,
      "start": 119.28,
      "end": 124.88000000000001,
      "text": "It's generated it. Now these are the search terms, which you're going to use with the Paxles API."
    },
    {
      "id": 33,
      "seek": 11040,
      "start": 124.88000000000001,
      "end": 128.0,
      "text": "Now are the videos it shows. Now it's downloading those."
    },
    {
      "id": 34,
      "seek": 11040,
      "start": 129.6,
      "end": 138.24,
      "text": "Okay, it prints the script again. Now let's complete the Texas Beach using the TikTok API or unofficial API."
    },
    {
      "id": 35,
      "seek": 13824,
      "start": 138.4,
      "end": 143.76000000000002,
      "text": "All right, now it's generated the subtitles with the assembly I, and last on a list,"
    },
    {
      "id": 36,
      "seek": 13824,
      "start": 143.76000000000002,
      "end": 149.60000000000002,
      "text": "it's combining everything together. And once this is done, we should have our output of N before."
    },
    {
      "id": 37,
      "seek": 13824,
      "start": 149.60000000000002,
      "end": 154.08,
      "text": "I'm going to speed up this process a little bit because it's pouring. All right, it seems like we still"
    },
    {
      "id": 38,
      "seek": 13824,
      "start": 154.08,
      "end": 160.0,
      "text": "have to do something. So I'm going to take that sacrifice because I'd rather rate a little while"
    },
    {
      "id": 39,
      "seek": 13824,
      "start": 160.0,
      "end": 164.16000000000003,
      "text": "than edit all these videos myself. So I'm fine with that. Great. Now it's done."
    },
    {
      "id": 40,
      "seek": 16416,
      "start": 165.12,
      "end": 170.8,
      "text": "That's it. Let's have a look at our video. The Amazon rainforest is the largest tropical rainforest"
    },
    {
      "id": 41,
      "seek": 16416,
      "start": 170.8,
      "end": 177.35999999999999,
      "text": "in the world covering an area of approximately 5.5 million square kilometers. It is home to a"
    },
    {
      "id": 42,
      "seek": 16416,
      "start": 177.35999999999999,
      "end": 183.68,
      "text": "diverse range of plant and animal species. Many of which are found nowhere else on earth. This looks"
    },
    {
      "id": 43,
      "seek": 16416,
      "start": 183.68,
      "end": 188.8,
      "text": "good enough. Just here we don't think this was just a useless project. I actually tested these clips"
    },
    {
      "id": 44,
      "seek": 18880,
      "start": 188.88000000000002,
      "end": 195.68,
      "text": "on a channel and here are the results. As you can see, I did get a couple of one KVU shorts,"
    },
    {
      "id": 45,
      "seek": 18880,
      "start": 195.68,
      "end": 200.16000000000003,
      "text": "which is pretty impressive for an automation bot in my opinion. If you guys want the code,"
    },
    {
      "id": 46,
      "seek": 18880,
      "start": 200.16000000000003,
      "end": 204.72,
      "text": "like and subscribe, as I'll be posting it on GitHub in the upcoming days. Till next time."
    }
  ],
  "language": "en"
}